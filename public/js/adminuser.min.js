
const userForm = document.getElementById('userForm');
const userList = document.getElementById('userList');
const alertMessage = document.getElementById('alertMessage');
const rrpassword = document.getElementById('rpassword');
const password = document.getElementById('password');
const userid = document.getElementById('userId');
let res;

document.addEventListener('DOMContentLoaded', () => {
    renderUsers(); //llama a los usuarios de la base de datos
});

userForm.addEventListener('submit', async function (event) {
    
    event.preventDefault();

    const bodyData = {

        firstName: document.getElementById('firstName').value,
        lastName: document.getElementById('lastName').value,
        email: document.getElementById('email').value,
        rank: document.getElementById('rank').value,
        rolId: document.getElementById('role').value,
        estatus: document.getElementById('status').value,
        rrpassword: document.getElementById('rpassword').value,
        password: document.getElementById('password').value
    };
//console.log(bodyData)
    if (userid.value == '') {

       res = await postNewUser(bodyData);

    } else {

       res = await editUser(userid.value, bodyData);
    }

   //console.log(userid)
    if (res.status === 'success') {
        alertMessage.style.display = 'block';
        alertMessage.innerHTML = `<div class='alert alert-success' role='alert'>${res.message}</div>`;
    } else {
        alertMessage.style.display = 'block';
        alertMessage.innerHTML = `<div class='alert alert-warning' role='alert'>${res.message}</div>`;
    }

    userForm.reset();
    userid.value='';
    renderUsers();
});


// Función para verificar las contraseñas
const validatePasswords = () => {
    if (rrpassword.value !== password.value) {
        alertMessage.style.display = 'block';
        alertMessage.innerHTML = `<div class='alert alert-warning' role='alert'>Las contraseñas no coinciden</div>`;
    } else {
        alertMessage.style.display = 'none';
    }
};

// Agrega el listener de eventos
rrpassword.addEventListener('keyup', validatePasswords);



const postNewUser = async (bodyData) => {
    //console.log(bodyData)
    try {
        const res = await fetch('/adminuser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(bodyData)
        });
        if (res.ok) {
            const data = await res.json();
            
            return data;
        } else {
            return { status: 'error', message: 'Error en la solicitud' };

        }
    } catch (error) {
        console.log(error);
    }
};

const getUser = async () => {
    try {
        const res = await fetch('/api/users/all', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });
        if (res.ok) {
            const data = await res.json();
            return data;
        } else {
            throw new Error('Error en la solicitud: ' + res.statusText);
        }
    } catch (error) {
        console.error('Error al obtener usuarios:', error);
        // Retornar null o manejar el error de otra forma
        return null;
    }
};


const editUser = async (userId, bodyData) => {
    try {
        const res = await fetch(`/adminuser/${userId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(bodyData) // Agregar el cuerpo de la solicitud con los datos del usuario
        });

        if (!res.ok) {
            throw new Error(`Error en la solicitud: ${res.status} ${res.statusText}`);
        }

        const data = await res.json(); 
        renderUsers(); 
        return data; 

    } catch (error) {
        console.error('Error al actualizar el usuario:', error);
        return null; // Retornar null en caso de error
    }
};


const deleteUser = async (userId) => {
    //
    const messagedelete = await Swal.fire({
        title: "¿Está seguro?",
        text: "¡No podrá revertir esto!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "¡Sí, elimínelo!"
    });
    if (messagedelete.isConfirmed) {

        try {
            const res = await fetch(`/adminuser/${userId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
            });
            Swal.fire({
                title: "Deleted!",
                text: "Your file has been deleted.",
                icon: "success"
            });

            if (!res.ok) {
                throw new Error(`Error en la solicitud: ${res.status} ${res.statusText}`);

            }

            const data = await res.json(); // Analizar la respuesta JSON
            renderUsers(); // Actualizar la lista de usuarios
            return data; // Retornar los datos recibidos

        } catch (error) {
            console.error('Error al eliminar el usuario:', error);
            return null; // Retornar null en caso de error
        }
    }
};


const getuserByid = async (userId) => {
    try {
        const res = await fetch(`/adminuser/${userId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
        });
        if (!res.ok) {
            throw new Error(`Error en la solicitud: ${status} ${message}`);
        }
        const {status, message, data} = await res.json(); // Analizar la respuesta JSON

            document.getElementById('userId').value = data.id,
            document.getElementById('firstName').value = data.nombre,
            document.getElementById('lastName').value = data.apellido,
            document.getElementById('email').value = data.correo,
            document.getElementById('rank').value = data.rango,
            document.getElementById('role').value = data.rolId,
            document.getElementById('status').value = data.estatus
            
    } catch (error) {
        console.error('Error al actualizar el usuario:', message);
        return null; // Retornar null en caso de error
    }
}


const renderUsers = async () => {
    const {status, message, data} = await getUser()
    userList.innerHTML = '';

    data.forEach((data) => {
        userList.innerHTML += `
            <tr>
                <td>${data.nombre}</td>
                <td>${data.apellido}</td>
                <td>${data.correo}</td>
                <td>${data.rango}</td>
                <td>${data?.rolUser?.nombre}</td>
                <td>${data.estatus}</td>
                <td style='row'>
                    <div style='col-md-6'>
                    <button class='btn btn-warning mr-2' onclick="getuserByid('${data.id}')">Editar</button>
                    </div>
                    <div style='col-md-6'>
                    <button class='btn btn-danger' onclick="deleteUser('${data.id}')">Eliminar</button>
                    </div>
                </td>
            </tr>`;
    });

}

