// Obtener el formulario de inicio de sesión
const loginForm = document.getElementById('loginForm');
const alertmessage = document.getElementById('alertMessage')
const messages = {
    "successession": "Iniciando Sesion",
    "invalidCredentials": "El correo electrónico o la contraseña son incorrectos."
};

loginForm.addEventListener("submit", async (e) => {
    e.preventDefault(); 

    const bodyLogin = {
        email: document.getElementById('email').value,
        password: document.getElementById('password').value
    };

    // Validar que los campos no estén vacíos
    if (!bodyLogin.email || !bodyLogin.password) {
        alert(messages.missingFields);
        return; // Salir si hay campos vacíos
    }

    try {
        const newLogin = await newLoginUser(bodyLogin);
        if (newLogin.redirect) {
        }
    } catch (error) {
        alertmessage.style.display = 'block';
        alertmessage.innerHTML = `<div class='alert alert-warning' role='alert'>${messages.invalidCredentials}</div>`;    }
});

// Función para manejar el inicio de sesión
const newLoginUser = async (bodyLogin) => {
    try {
        const res = await fetch('/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(bodyLogin) 
        });

        // Verificar si la respuesta es exitosa
        if (!res.ok) {
            throw new Error('Error en la solicitud: '); // Manejo de errores HTTP
        }
        window.location.href = '/index';

        const data = await res.json(); // espera el JSON
        return data; // Retornar los datos obtenidos

    } catch (error) {
        console.error('Error en la función newLoginUser:', error); // Manejo de errores
        throw error; // Re-lanzar el error para manejarlo en el evento submit
    }
};